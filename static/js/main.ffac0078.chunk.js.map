{"version":3,"sources":["components/TodoComp.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","toggleTodo","type","checked","complete","onChange","id","name","ToDoList","todoes","map","local_Storage_key","App","useState","setTodoes","todoNameRef","useRef","useEffect","storedTodoes","JSON","parse","localStorage","getItem","setItem","stringify","ref","onClick","e","current","value","prevTodoes","uuidv4","newTodoes","filter","find","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAiBeA,MAff,YAAmC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,WAIjB,OACI,8BACI,kCACI,uBAAOC,KAAM,WAAWC,QAASH,EAAKI,SAAUC,SAN5D,WACIJ,EAAWD,EAAKM,OAOPN,EAAKO,WCEPC,MARf,YAAwC,IAArBC,EAAoB,EAApBA,OAAQR,EAAY,EAAZA,WACvB,OACIQ,EAAOC,KAAI,SAAAV,GACP,OAAO,cAAC,EAAD,CAAoBC,WAAcA,EAAYD,KAAMA,GAAzCA,EAAKM,Q,QCF7BK,EAAmB,iBAiDVC,MA/Cf,WACE,MAA2BC,mBAAS,IAApC,mBAAMJ,EAAN,KAAcK,EAAd,KACMC,EAAcC,mBA+BpB,OA7BAC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQX,IACjDO,GAAcJ,EAAUI,KAC3B,IAEHD,qBAAU,WACRI,aAAaE,QAAQZ,EAAmBQ,KAAKK,UAAUf,MACvD,CAACA,IAuBD,qCACE,iEACA,uBAAOgB,IAAKV,EAAab,KAAK,SAC9B,wBAAQwB,QAjBZ,SAAuBC,GACrB,IAAMpB,EAAOQ,EAAYa,QAAQC,MACpB,KAATtB,IACJO,GAAU,SAAAgB,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAACxB,GAAGyB,cAAUxB,KAAKA,EAAMH,UAAU,QAE3DW,EAAYa,QAAQC,MAAQ,OAW1B,uBACA,wBAAQH,QATZ,WACE,IAAMM,EAAWvB,EAAOwB,QAAO,SAAAjC,GAAI,OAAIA,EAAKI,YAC5CU,EAAUkB,IAOR,8BACA,wHACA,cAAC,EAAD,CAAUvB,OAAQA,EAAQR,WA3BhC,SAAoBK,GAClB,IAAM0B,EAAS,YAAMvB,GACfT,EAAMgC,EAAUE,MAAK,SAAAlC,GAAI,OAAGA,EAAKM,KAAOA,KAC9CN,EAAKI,UAAYJ,EAAKI,SACtBU,EAAUkB,MAwBN,uBACA,oCAAOvB,EAAOwB,QAAO,SAAAxB,GAAM,OAAIA,EAAOL,YAAU+B,OAAhD,iCCtCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ffac0078.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Todo({todo, toggleTodo}) {\r\n    function handleTodoClick(){\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n        <div>\r\n            <label>\r\n                <input type =\"checkbox\" checked={todo.complete} onChange = \r\n                {handleTodoClick}/>\r\n                {todo.name}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n","import React  from 'react'\r\nimport Todo from './TodoComp';\r\n\r\n  \r\n\r\nfunction ToDoList({todoes, toggleTodo}){\r\n    return (\r\n        todoes.map(todo =>{\r\n            return <Todo key={todo.id} toggleTodo = {toggleTodo} todo={todo}/>\r\n        })\r\n    )\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\nimport{useState, useRef, useEffect} from \"react\";\nimport { v4 as uuidv4 } from 'uuid';  \n\nconst local_Storage_key ='todoApp.todoes'\n\nfunction App() {\n  const[todoes, setTodoes] = useState([])\n  const todoNameRef = useRef()\n\n  useEffect(()=>{\n    const storedTodoes = JSON.parse(localStorage.getItem(local_Storage_key))\n    if (storedTodoes) setTodoes(storedTodoes)\n  }, [])\n\n  useEffect(()=>{\n    localStorage.setItem(local_Storage_key, JSON.stringify(todoes))\n  },[todoes])\n\nfunction toggleTodo(id){\n  const newTodoes =[...todoes]\n  const todo= newTodoes.find(todo=> todo.id === id)\n  todo.complete = !todo.complete\n  setTodoes(newTodoes)\n}\n\n  function handleAddTodo(e){\n    const name = todoNameRef.current.value\n    if (name === '')return\n    setTodoes(prevTodoes =>{\n      return [...prevTodoes,{id:uuidv4(), name:name, complete: false}]\n    })\n    todoNameRef.current.value = null\n  }\n\n  function handleClearTodoes(){\n    const newTodoes =todoes.filter(todo =>!todo.complete)\n    setTodoes(newTodoes)\n  }\n  return (\n    <>\n      <p>Create your Todo Checklist below</p>\n      <input ref={todoNameRef} type=\"text\"/>\n      <button onClick={handleAddTodo} >Add To-Do</button>\n      <button onClick={handleClearTodoes}>Clear To-do list</button>\n      <p> Once task is done check the checkbox, the \"clear To-do list\" to indicate task complete</p>\n      <ToDoList todoes={todoes} toggleTodo ={toggleTodo}/>\n      <br/>\n      <div> {todoes.filter(todoes=> !todoes.complete).length} Items still need doing</div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}